class Solution {
    private int preIndex = 0; // Tracks current root in preorder
    private Map<Integer, Integer> inorderMap; // Stores inorder value-to-index mappings

    public TreeNode buildTree(int[] preorder, int[] inorder) {
        // Step 1: Populate inorder hashmap for O(1) lookups
        inorderMap = new HashMap<>();
        for (int i = 0; i < inorder.length; i++) {
            inorderMap.put(inorder[i], i);
        }
        // Step 2: Start recursive construction
        return buildTreeHelper(preorder, 0, inorder.length - 1);
    }

    private TreeNode buildTreeHelper(int[] preorder, int left, int right) {
        // Base case: No elements left to process
        if (left > right) return null;

        // Step 3: Pick current root from preorder
        TreeNode root = new TreeNode(preorder[preIndex++]);

        // Step 4: Find root's position in inorder
        int mid = inorderMap.get(root.val);

        // Step 5: Recursively build left and right subtrees
        root.left = buildTreeHelper(preorder, left, mid - 1);  // Left partition
        root.right = buildTreeHelper(preorder, mid + 1, right); // Right partition

        return root;
    }
}