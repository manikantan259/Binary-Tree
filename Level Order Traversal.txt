==================================================
Algorithm: Level Order Traversal (BFS) of Binary Tree
==================================================

### Approach (Breadth-First Search)
1. **Initialization**:
   - Use a queue to track nodes level by level.
   - Start with the root node.
2. **Process Nodes**:
   - Dequeue a node, add its value to the result.
   - Enqueue its left child (if exists), then right child.
3. **Termination**:
   - Stop when the queue is empty.

### Java Code
```java
class Node {
    int data;
    Node left, right;
    Node(int item) { data = item; }
}

class Solution {
    public ArrayList<Integer> levelOrder(Node root) {
        ArrayList<Integer> result = new ArrayList<>();
        if (root == null) return result;

        Queue<Node> queue = new LinkedList<>();
        queue.offer(root);

        while (!queue.isEmpty()) {
            Node curr = queue.poll();
            result.add(curr.data);

            // Left child first, then right (standard BFS)
            if (curr.left != null) queue.offer(curr.left);
            if (curr.right != null) queue.offer(curr.right);
        }
        return result;
    }
}