Diagonal Traversal of Binary Tree - Running Notes


Problem Description:

Perform diagonal traversal of a binary tree.

Nodes in the same diagonal (from right to left) are printed together.


Algorithm:

Use a queue to store nodes of the current diagonal.
Steps:
If root is null, return.Add root to queue.
While queue is not empty:Get size of queue (nodes starting current diagonal).
For each node in queue:
Process node: Print data.
Add left child to queue (for next diagonal).
Move to right child (same diagonal).
Repeat until queue is empty.



Java Code: import java.util.*;

class Node { int data; Node left, right;

Node(int data) {
    this.data = data;
    left = right = null;
}

}

   public ArrayList<Integer> diagonal(Node root) {
       
       
       // queue
       // curr!=null print the data
       // q lo add its left
       // move to curr's right
       
       ArrayList<Integer> res = new ArrayList<>();
       Queue <Node> q= new LinkedList<>();
       q.add(root);
       while ( ! q.isEmpty()){
           int size = q.size();
           
           for (int i = 0; i < size; i++) {
                Node curr = q.poll();
                
                while ( curr !=null){
                    
                   if (curr.left != null) {
                        q.add(curr.left);
                    }
                    
                   res.add(curr.data);
                    
                    curr= curr.right;
                }
                
          
           
           
       }
    }return res;
}
}




