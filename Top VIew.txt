====================================================================
Top View of Binary Tree - Algorithm & Implementation Notes
====================================================================

ALGORITHM:
1. Horizontal Distance Tracking:
   - Root node: hd = 0
   - Left child: hd = parent_hd - 1
   - Right child: hd = parent_hd + 1

2. BFS Traversal (Level Order):
   - Use a Queue to track nodes and their hd
   - Use TreeMap to store first node at each hd
   - TreeMap automatically sorts by hd (left-to-right order)

3. Result Generation:
   - Extract values from TreeMap in hd-sorted order

COMPLEXITY:
- Time: O(N log N) - TreeMap operations
- Space: O(N) - For Queue and TreeMap

EDGE CASES:
1. Empty tree → Return empty list
2. Single node → Return [root.val]
3. Skewed trees → Handled naturally by BFS

JAVA IMPLEMENTATION:
----------------------------------------------------
import java.util.*;

class Node {
    int data;
    Node left, right;
    Node(int item) { data = item; }
}

class Solution {
    static class QueueNode {
        Node node;
        int hd;
        QueueNode(Node node, int hd) {
            this.node = node;
            this.hd = hd;
        }
    }

    static ArrayList<Integer> topView(Node root) {
        ArrayList<Integer> result = new ArrayList<>();
        if (root == null) return result;

        TreeMap<Integer, Integer> hdMap = new TreeMap<>();
        Queue<QueueNode> queue = new LinkedList<>();
        queue.add(new QueueNode(root, 0));

        while (!queue.isEmpty()) {
            QueueNode current = queue.poll();
            int hd = current.hd;
            Node node = current.node;

            if (!hdMap.containsKey(hd)) {
                hdMap.put(hd, node.data);
            }

            if (node.left != null) {
                queue.add(new QueueNode(node.left, hd - 1));
            }
            if (node.right != null) {
                queue.add(new QueueNode(node.right, hd + 1));
            }
        }

        result.addAll(hdMap.values());
        return result;
    }
}
----------------------------------------------------

EXAMPLE EXECUTION:
Tree:
        1
       / \
      2   3
       \   \
        4   5

Step-by-Step:
1. hd=0: Add 1
2. hd=-1: Add 2
3. hd=1: Add 3
4. hd=0: Skip (1 already exists)
5. hd=2: Add 5

Final Top View: [2, 1, 3, 5]

NOTES:
- TreeMap ensures nodes are sorted by hd
- Only first node at each hd is kept
- BFS guarantees we get top nodes before bottom ones