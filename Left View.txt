==================================================
Algorithm: Left View of Binary Tree (BFS Approach)
==================================================

### Approach (Level Order Traversal)
1. **Initialization**:
   - Use a queue for BFS traversal.
   - Track nodes level by level.
2. **Process Each Level**:
   - For each level, add the first node's value (leftmost) to the result.
   - Enqueue left and right children for the next level.
3. **Termination**:
   - Stop when the queue is empty.

### Java Code
```java
class Node {
    int data;
    Node left, right;
    Node(int item) { data = item; }
}

class Solution {
    ArrayList<Integer> leftView(Node root) {
        ArrayList<Integer> result = new ArrayList<>();
        if (root == null) return result;
        
        Queue<Node> queue = new LinkedList<>();
        queue.offer(root);
        
        while (!queue.isEmpty()) {
            int levelSize = queue.size();
            for (int i = 0; i < levelSize; i++) {
                Node curr = queue.poll();
                if (i == 0) result.add(curr.data); // Capture leftmost node
                
                if (curr.left != null) queue.offer(curr.left);
                if (curr.right != null) queue.offer(curr.right);
            }
        }
        return result;
    }
}